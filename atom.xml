<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yuchuanghui.github.io</id>
    <title>一丝余辉</title>
    <updated>2025-01-12T13:43:20.665Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yuchuanghui.github.io"/>
    <link rel="self" href="https://yuchuanghui.github.io/atom.xml"/>
    <subtitle>なんくるないさー</subtitle>
    <logo>https://yuchuanghui.github.io/images/avatar.png</logo>
    <icon>https://yuchuanghui.github.io/favicon.ico</icon>
    <rights>All rights reserved 2025, 一丝余辉</rights>
    <entry>
        <title type="html"><![CDATA[WSL配置记录]]></title>
        <id>https://yuchuanghui.github.io/post/wsl-pei-zhi-ji-lu/</id>
        <link href="https://yuchuanghui.github.io/post/wsl-pei-zhi-ji-lu/">
        </link>
        <updated>2025-01-12T13:37:29.000Z</updated>
        <summary type="html"><![CDATA[<p>使用最新版本的WSL，相对更加简单易用</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用最新版本的WSL，相对更加简单易用</p>
<!-- more -->
<h2 id="wsl安装">wsl安装</h2>
<p>bug 解决：The Windows Subsystem for Linux optional component is not enabled. Please enable it and try again.<br>
<a href="https://blog.mokeedev.com/2023/01/1444/">在 Windows 11 上安装 Ubuntu 22.04 子系统时遇到的问题和解决方法 - 马丁龙猪的博客</a><br>
使用手动安装可以指定盘的位置<br>
<a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual">Manual installation steps for older versions of WSL | Microsoft Learn</a><br>
步骤包括：打开wsl服务、打开虚拟化平台(重启后生效)<br>
下载包，解压第一次，再解压appx(x64)文件<br>
安装wsl升级包(第一步必须完成并重启)<br>
双击exe安装<br>
wsl --update<br>
wsl --update --prerelease</p>
<h2 id="wsl共享代理">wsl共享代理</h2>
<pre><code class="language-bash">[experimental] 
autoMemoryReclaim=gradual 
networkingMode=mirrored 
dnsTunneling=true 
firewall=true 
autoProxy=true
</code></pre>
<p>更新到最新的wsl prerelease后修改<br>
<a href="https://linux.do/t/topic/185815/3">Site Unreachable</a><br>
wsl --manage Ubuntu --set-sparse true<br>
启用稀疏 VHD 允许 WSL2 的硬盘空间自动回收<br>
<a href="https://zhuanlan.zhihu.com/p/657110386">Site Unreachable</a></p>
<h2 id="docker安装">docker安装</h2>
<h4 id="本体安装">本体安装</h4>
<p><a href="https://linux.do/t/topic/207951">彻底摆脱docker-desktop，让你在wsl中没有任何烦恼地使用docker - 开发调优 - LINUX DO</a></p>
<pre><code class="language-bash"># 更新包索引 
sudo apt update
# 安装依赖包 
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common 
# 添加 Docker 官方 GPG 密钥 
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg 
# 添加 Docker 官方仓库 
echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
# 更新包索引 
sudo apt update 
# 安装 Docker 
sudo apt install -y docker-ce docker-ce-cli containerd.io
# 启动并启用 Docker 服务 
sudo systemctl start docker 
sudo systemctl enable docker 
# 验证 Docker 是否安装成功 
docker --version
# 查看信息
sudo docker info
</code></pre>
<p>安装完自带compose</p>
<h4 id="配置wsl的system命令">配置WSL的system命令</h4>
<pre><code class="language-bash">sudo nano /etc/wsl.conf
</code></pre>
<p>添加以下内容：</p>
<pre><code>[boot] systemd=true
</code></pre>
<p>或者使用service</p>
<h4 id="换源代理">换源？代理！</h4>
<p>最新版的wsl支持mirror net，需要wsl --update 接着wsl --update --pre-release<br>
换源无法解决拉取镜像问题<br>
最佳办法，修改docker代理：<br>
<a href="https://zhuanlan.zhihu.com/p/427589367">Site Unreachable</a><br>
<a href="https://blog.csdn.net/omage/article/details/139560401">window wsl2的ubuntu如何配置代理获取docker image_wsl docker proxy-CSDN博客</a></p>
<ol>
<li>配置client代理可解决docker compose问题  <strong>没有用</strong><br>
即,在WSL2中通过通用方式安装的docker.</li>
</ol>
<pre><code class="language-text">sudo vim /etc/default/docker

输入:
export HTTP_PROXY=&quot;http://127.0.0.1:1080&quot;
export HTTPS_PROXY=&quot;http://127.0.0.1:1080&quot;
export NO_PROXY=&quot;localhost,127.0.0.0/8,172.16.0.0/12,192.168.0.0/16,10.0.0.0/8&quot;
</code></pre>
<p>以下方法有用！</p>
<pre><code class="language-bash">### 1、创建配置文件
sudo mkdir -p /etc/systemd/system/docker.service.d
sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf
### 2、添加配置
[Service]
Environment=&quot;HTTP_PROXY=http://127.0.0.1:1080&quot;
Environment=&quot;HTTPS_PROXY=http://127.0.0.1:1080&quot;
Environment=&quot;NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp,&quot;
### 3、重启容器
sudo systemctl daemon-reload
sudo systemctl restart docker
</code></pre>
<h2 id="1panel">1panel</h2>
<p>远程运维工具<br>
docker-compose file</p>
<pre><code>
</code></pre>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决pyinstaller打包问题]]></title>
        <id>https://yuchuanghui.github.io/post/jie-jue-pyinstaller-da-bao-wen-ti/</id>
        <link href="https://yuchuanghui.github.io/post/jie-jue-pyinstaller-da-bao-wen-ti/">
        </link>
        <updated>2024-12-01T14:30:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题一">问题一</h2>
<p>如下图所示文件结构<br>
├─data<br>
├─logs<br>
└─QSS<br>
└─QSS_IMG<br>
├─main.exe<br>
├─config.ini<br>
├─powergram.json</p>
<p>main.exe在运行时找不到需要引用的路径文件（config.ini、powergram.json）和文件夹（data、logs)<br>
解决办法：</p>
<pre><code class="language-python">import sys
import os
if getattr(sys, 'frozen', False):
    # 如果程序是“冷冻”的，即打包后的程序
    basedir = sys._MEIPASS
else:
    # 如果程序是正常运行的
    basedir = os.path.dirname(__file__)
# 获取具体的文件或文件夹路径
filepath = os.path.join(basedir, 'your_file_or_folder_name')
</code></pre>
<p>将需要的path按照exe/脚本分别添加dirname的模式即可解决</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nginx反向代理被ban服务器]]></title>
        <id>https://yuchuanghui.github.io/post/nginx-fan-xiang-dai-li-bei-ban-fu-wu-qi/</id>
        <link href="https://yuchuanghui.github.io/post/nginx-fan-xiang-dai-li-bei-ban-fu-wu-qi/">
        </link>
        <updated>2022-11-27T08:56:56.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://yuchuanghui.github.io/post-images/1669540529603.png" alt="" loading="lazy">nginx反向代理</p>
<p>原理</p>
<p>正向代理：代理客户端</p>
<p>反向代理：代理服务端</p>
<p>用途之一：一台服务器被墙，采用另一台未被墙的服务器作为代理</p>
<p>域名A--&gt;服务器A--&gt;域名B--&gt;服务器A</p>
<p>步骤：</p>
<ol>
<li>安装nginx</li>
<li>nginx配置</li>
</ol>
<pre><code class="language-conf">\#设定负载均衡的服务器列表 

\#weigth参数表示权值，权值越高被分配到的几率越大

\# upstream cheems{

\#     server https://yisiyuhui.top weight=1;

\# }
\# 采用upstream时--&gt;proxy_pass cheems，但此处只需要代理一台服务器，所以不需要这种写法
   

server {

   \#侦听的443端口

    listen 443 ssl; # managed by Certbot

    server_name yisiyuhui.buzz;

    ssl_certificate /etc/letsencrypt/live/yisiyuhui.buzz-0001/fullchain.pem; # managed by Certbot

    ssl_certificate_key /etc/letsencrypt/live/yisiyuhui.buzz-0001/privkey.pem; # managed by Certbot

    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot

    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

   

    location / {

        \# proxy_pass   209.141.40.130:433;    #在这里设置一个代理，和upstream的名字一样（有的话）

        proxy_pass   https://yisiyuhui.top;    #可以是域名或者ip:port

       \#以下是一些反向代理的配置可删除

        \# proxy_redirect             on; 

        \# #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP

        proxy_set_header           Host $host; 

        proxy_set_header           X-Real-IP $remote_addr; 

        proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for; 

        client_max_body_size       10m; #允许客户端请求的最大单文件字节数

        client_body_buffer_size    128k; #缓冲区代理缓冲用户端请求的最大字节数

        proxy_connect_timeout      300; #nginx跟后端服务器连接超时时间(代理连接超时)

        proxy_send_timeout         300; #后端服务器数据回传时间(代理发送超时)

        proxy_read_timeout         300; #连接成功后，后端服务器响应时间(代理接收超时)

        proxy_buffer_size          4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小

        proxy_buffers              4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置

        proxy_busy_buffers_size    64k; #高负荷下缓冲大小（proxy_buffers*2）

        proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传

    }

}

   
server {

    if ($host = yisiyuhui.buzz) {

        return 301 https://$host$request_uri;

    } # managed by Certbot


    server_name yisiyuhui.buzz;

    listen 80;

    return 404; # managed by Certbot

}
</code></pre>
<p>注意：</p>
<ol>
<li>
<p>B服务器存在表单操作时，需要注意跨域问题，即A、B均需要为https</p>
</li>
<li>
<p>nginx有时候会出现modules-available  modules-enabled的文件夹，出现配置覆盖，然后conf.d中配置无法生效的问题，一般会出现在80端口。</p>
</li>
<li>
<p>nginx 常用命令</p>
<pre><code class="language-bash">nginx -s reload
nginx -s run
systemctl status nginx
netstat | grep nginx
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[try系列语法]]></title>
        <id>https://yuchuanghui.github.io/post/try-xi-lie-yu-fa/</id>
        <link href="https://yuchuanghui.github.io/post/try-xi-lie-yu-fa/">
        </link>
        <updated>2022-08-13T10:18:30.000Z</updated>
        <summary type="html"><![CDATA[<p>日语备考中----先从复习语法开始</p>
]]></summary>
        <content type="html"><![CDATA[<p>日语备考中----先从复习语法开始</p>
<!-- more -->
<h2 id="tryn3">tryN3</h2>
<ol>
<li>
<p>V-ます＋<strong>始めた</strong></p>
</li>
<li>
<p><strong>～て/～てから/～たら</strong>　違い</p>
</li>
<li>
<p><strong>～たら/～ば/～と/～なら</strong></p>
</li>
<li>
<p>V-る/ない＋<strong>ように</strong>言う/注意する/頼む/伝える：命令・禁止・指示・助言などを伝う</p>
</li>
<li>
<p><strong>ん/のです</strong></p>
</li>
<li>
<p>V-ます＋<strong>そうもない/そうにない/そうにもない</strong>：なさそう</p>
</li>
<li>
<p>V-る/V-ない/N＋ほど 无过去形　くらい　違い</p>
</li>
<li>
<p><strong>も</strong></p>
<p>①もまた</p>
<p>私もほしい　也</p>
<p>②同類の事柄を並列・列挙する意を表す</p>
<p>広くもないしせまくなくて、ちょうどいい</p>
<p>③全面的であることを表す</p>
<p>誰も知らない／誰もが知ってる　不定称の指示語+も</p>
<p>ふりむきもしない ／返事もしない　動詞の連用形や動作性名詞に付いて，下に否定の語を伴い，打ち消しの意を強めて表す</p>
<p>一度も行ったことがない　　数词+も　全然ない</p>
<p>④おおよその程度を表す。…ぐらい。…ほど。</p>
<p>一週間もあればできるでしょう ば　最多，最高</p>
<p>⑤驚き・感動の意を表す　强调</p>
<p>病気で五年間も寝たままです/100万円もするんじゃ　强调数量</p>
<p>子供もわかる　极端例子</p>
<p>早くもいちねん</p>
<p>勝ちも買ったり</p>
<p>さえ　違い</p>
</li>
<li>
<p><strong>て</strong></p>
</li>
<li>
<p>いA　<s>い</s> /なA/Vます型　た<s>い</s>　+　<strong>がる</strong></p>
<p>表示第三人称的感情</p>
<p><a href="https://www.sigure.tw/learn-japanese/grammar/n4/08.php">参考</a> <a href="https://blognihongo.com/n3/grammar_garu/">参考2</a> <a href="https://blognihongo.com/n2/grammar_buru/">ぶる</a></p>
</li>
<li>
<p><strong>とたん/なり/とおもうと/</strong>  一……就</p>
</li>
<li>
<p><strong>~だす</strong>　＝　急に始まった</p>
</li>
<li>
<p><strong>～ようとする</strong>：今から～しようと思って、～しようと頑張っていると言いたい。否定形は批判する気持ちを表す。打算现在开始做~</p>
<p>ようと思う：强调决定、意志</p>
<p>目的</p>
</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220802155347511.png" alt="image-20220802155347511" loading="lazy"></figure>
<ol start="14">
<li>
<p><strong>V-る/ーない＋ことが/もある</strong>：たまに</p>
</li>
<li>
<p><strong>意志動詞／無意志動詞</strong>　<a href="https://www.tomojuku.com/blog/verb-2/">日本語教師の広場)</a></p>
</li>
<li>
<p><strong>~させておく</strong></p>
</li>
<li>
<p><strong>から/ので/ため</strong> よって　原因　<a href="https://99bako.com/1748.html">1</a> <a href="https://www.goodcross.com/words/2904-2015#:~:text=%E3%80%8C%E3%81%8B%E3%82%89%E3%80%8D%E3%81%A8%E3%80%8C%E3%81%AE%E3%81%A7%E3%80%8D%E3%81%8C%E3%81%82%E3%81%8F%E3%81%BE%E3%81%A7%E8%A9%B1%E3%81%97%E6%89%8B%E3%81%AE%E6%84%8F%E6%80%9D,%E3%81%82%E3%82%8B%E5%8D%B0%E8%B1%A1%E3%82%92%E4%B8%8E%E3%81%88%E3%81%BE%E3%81%99%E3%80%82">2</a> <a href="https://www.youtube.com/watch?v=mWW2giCQBf0">3</a> <a href="https://nihongonoblog.com/ja/%E3%80%8C%EF%BD%9E%E3%81%8B%E3%82%89%E3%80%8D%E3%80%8C%EF%BD%9E%E3%81%AE%E3%81%A7%E3%80%8D%E3%80%8C%EF%BD%9E%E3%81%9F%E3%82%81%E3%80%8D%E3%81%AE%E9%81%95%E3%81%84%E2%97%86%E4%BD%BF%E3%81%84%E5%88%86/">4</a></p>
</li>
<li>
<p><strong>ばかり</strong>　ばかりか　たばかり　ばかりでなく　<a href="https://nihongonosensei.net/?p=11950">毎日のんびり日本語教師</a></p>
</li>
<li>
<p><strong>N+による/よって/より</strong></p>
<p><strong>よる＋名詞</strong></p>
<figure data-type="image" tabindex="2"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220803150014524.png" alt="image-20220803150014524" loading="lazy"></figure>
<p><a href="https://nihongonosensei.net/?p=10102">毎日のんびり日本語教師</a> <a href="https://jn1et.com/niyotte/">によって　により　による　によっては　N3</a> <a href="https://yasuwangblog.com/niyotte/#:~:text=%E2%97%89%20%E3%80%8C%E3%81%AB%E3%82%88%E3%82%8B%E3%80%8D%EF%BC%8B%E5%90%8D%E8%A9%9E%E3%80%82&amp;text=%E2%91%A0%20%E7%89%A9%20%E3%82%82%E3%81%AE%20%E3%81%AE%20%E4%BE%A1%E6%A0%BC,%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%20%E5%88%86%20%E3%82%8F%20%E3%81%91%E3%82%8B%E3%80%82&amp;text=%E2%97%89%20%E5%8E%9F%E5%9B%A0%E3%83%BB%E7%90%86%E7%94%B1%EF%BC%9A%E5%8E%9F%E5%9B%A0%E3%82%92,%E3%81%A8%E5%90%8C%E3%81%98%E6%84%8F%E5%91%B3%E3%82%92%E6%8C%81%E3%81%A4%E3%80%82">〜による／により／によって（は）</a></p>
<p>によると/によれば　<a href="https://www.cocoro.idv.tw/%E2%9D%96-%E3%81%AB%E3%82%88%E3%82%8B%E3%81%A8%E3%83%BB%E3%81%AB%E3%82%88%E3%82%8C%E3%81%B0">1</a>: 表示资讯或者消息来源</p>
<p>によって：原因・根拠・手段　BはAの直接の結果 <strong>を利用する</strong>　凭借、利用(<strong>方法</strong>)</p>
<p>を通じて／通して：通过某种途径完成了某事，通过中间得人、手段、事物，强调途径　<strong>を経由に</strong>　<strong>媒介</strong>　<a href="https://japanese.stackexchange.com/questions/70723/difference-between-%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6-and-%E3%82%92%E9%80%9A%E3%81%98%E3%81%A6-through-by-means-of">1</a> <a href="https://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q11244207596">2</a> <a href="https://www.youtube.com/watch?v=_5ac0ZZ723M">3</a>　時間＋～　一整年　違い？</p>
</li>
<li>
<p><strong>に対して</strong>：动作对象、行为、对……感情、效果</p>
<p><a href="https://www.edewakaru.com/archives/21311678.html">1</a> <a href="https://www.mlcjapanese.co.jp/n2_04_31.html">2</a> <a href="https://www.tomojuku.com/blog/nitaishite/">3</a> <a href="https://nihongokyoshi-net.com/2018/08/07/jlptn3-grammar-nitaishite/">4</a></p>
<p>対象：</p>
<p>（１）行為が向けられる対象 （２）行為を受けて反応する対象 （３）感情・心的態度の向けられる対象 （４）効果が出る対象</p>
<p>について　ちがい</p>
<p>に対しての　に対して</p>
</li>
<li>
<p><strong>ずつ/ごとに/つきに/お気に</strong>　<a href="https://www.nihongo-appliedlinguistics.net/wp/archives/9338">1</a> <a href="https://ja.hinative.com/questions/1642229">2</a> <a href="https://ja.hinative.com/questions/15484579">3</a> <a href="https://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1097710785">4</a>　<a href="http://mywago.blogspot.com/2011/12/blog-post.html">5</a> <a href="https://ja.hinative.com/questions/18785963">6</a></p>
</li>
<li>
<p>按照 <a href="https://cjjc.weblio.jp/content/%E6%8C%89%E7%85%A7">1</a></p>
</li>
<li>
<p><strong>ように/みたいに/そう</strong>　違い　らしい　かのようだ</p>
<figure data-type="image" tabindex="3"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220811205030586.png" alt="image-20220811205030586" loading="lazy"></figure>
<p>N＋らしい　充分表现~的特点</p>
<p>桜が咲いたら春らしい季節になりました</p>
</li>
<li>
<p><strong>過去＋~りして</strong>　＝　かもしれない　口語</p>
<p><strong>過去＋って</strong>　＝　～ても　口語</p>
<p><strong>N＋って</strong>　＝　という/は</p>
<p><strong>に決まっている</strong>＝絶対だと思う</p>
<p><strong>っけ</strong>＝～ことはあるんですか</p>
</li>
<li>
<p>ばよかった＝自分　後悔　他人　残念</p>
<figure data-type="image" tabindex="4"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220809163246965.png" alt="image-20220809163246965" loading="lazy"></figure>
</li>
<li>
<p><strong>N・V-て＋ばかり　V-て＋ばかりいる　V-る/V-て＋ばかり</strong>　非難</p>
</li>
<li>
<p><strong>AはもちろんBも</strong>＝Aだけでなく、さらにBも</p>
<p><strong>AばかりでなくBも</strong>＝AばかりかB</p>
</li>
<li>
<p>接续</p>
<p><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220809180316012.png" alt="image-20220809180316012" loading="lazy"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220809180323209.png" alt="image-20220809180323209" loading="lazy"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220809180332411.png" alt="image-20220809180332411" loading="lazy"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220809180345098.png" alt="image-20220809180345098" loading="lazy"></p>
<figure data-type="image" tabindex="5"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220810164523376.png" alt="image-20220810164523376" loading="lazy"></figure>
<pre><code class="language-mermaid">graph LR;
N+助詞 --&gt; さえ;
V-て--&gt;さえ;

</code></pre>
</li>
<li>
<p><strong>ないで/せずに/なくて/せず</strong></p>
</li>
<li>
<p><strong>のは　ことは　違い</strong></p>
</li>
<li>
<p><strong>じゃない じゃないか</strong>　口語</p>
</li>
<li>
<p><strong>というと/ば/たら</strong>　その言葉から多くのひとがいめーじするものごとを言うときに使う</p>
</li>
<li>
<p>V-る＋べき＋だ/N　～するべき＝～すべき</p>
<p>～するべきではない＝そんな事をしてはいけない</p>
<p>～べきっだった＝～したほうが良いのにしなかったことを後悔している</p>
</li>
<li>
<p><strong>にとって</strong>　ある対象に対する態度を表す言葉は使えない</p>
</li>
<li>
<p>たびに、ごとに、おきに、ずつ　違い</p>
</li>
<li>
<p><strong>で/に</strong></p>
</li>
<li>
<p><strong>丁寧</strong></p>
<p>ようなら/だったら/ようでしたら＝なら/たらの丁寧形</p>
<p>なんか/なんて＝など　すーぷにするなら、この肉なんかいいと思いますよ</p>
<p>かと思う＝思う</p>
</li>
<li>
<p><strong>てくる</strong>　今までなかったものがあらわれたり、何かが始まったりしたときに使う</p>
<p>朝から降っていた雨がやんで、ちょっと晴れてきた</p>
<p><strong>てくる/ていく　ちがい</strong></p>
</li>
<li>
<p><strong>ものだから・ものですから・もので</strong>　<mark>「だから仕方ないのだ」というような「言い訳」「弁解・弁明」が含まれる</mark>　予定外のことや不本意な理由があったので〜だ　前件の程度がひどいので後件の状態になったことを述べるときに用いるのが特徴です　因为原因A而不得不发生了B（不好的事），属于不可抗力 为自己辩解</p>
<p>ですから 单纯的原因</p>
<p>んです</p>
<p>んだもの・だもん・ですもの(丁寧) 女性用得多</p>
<p><a href="https://nihongonosensei.net/?p=21999">毎日のんびり日本語教師</a><br>
<a href="https://chiyo-sampo.net/grammar-jlptn2-monodakara-monode-mono/">【N2文法】〜ものだから・もので・んだもの【言い訳・理由】</a><br>
<a href="https://www.edewakaru.com/archives/4853538.html">絵でわかる日本語</a><br>
<a href="https://www.nihongo-appliedlinguistics.net/wp/archives/2124">「ものですから」「んです」「ですから」の違いについて</a></p>
</li>
<li>
<p>うちに/うちで/うちには</p>
<figure data-type="image" tabindex="6"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220811205444852.png" alt="image-20220811205444852" loading="lazy"></figure>
</li>
<li>
<p>请求某人做某事：てください・てもらていいですか・ていただきたいんですが</p>
</li>
<li>
<p>～てからでなければ…／～てから出ないと…</p>
<p>~不实现的话（不先做某事的话），...就实现不了</p>
<p>してからの否定形</p>
</li>
<li>
<p>向け-対象の、ための<br>
向き-適した、ふさわしい</p>
<figure data-type="image" tabindex="7"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220811210408042.png" alt="image-20220811210408042" loading="lazy"></figure>
</li>
<li>
<p>けれど　だけど　が</p>
</li>
<li>
<p>V-ている/Nの＋最中に／最中だ</p>
<p>何かをしている、ちょうどそのときに、思っていなかったことが起きたときに使われる</p>
</li>
<li>
<p>かけ：何かをし始めて、まだ終わっていない状態</p>
<p>きり　はじめいた</p>
<figure data-type="image" tabindex="8"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220811212737683.png" alt="image-20220811212737683" loading="lazy"></figure>
</li>
<li>
<p>ずにはいられなく/ないではいられなく</p>
<p>我慢ができなくて、どうしても～してしまう状況</p>
</li>
<li>
<p>わけがない　强烈否定 ないわけがない　一定，非常肯定</p>
<figure data-type="image" tabindex="9"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220812101837247.png" alt="image-20220812101837247" loading="lazy"></figure>
</li>
<li>
<p>なんだから だって　听说　からこそ（前）/だからこそ（後ろ）　强调原因（大切な理由、特別な理由）</p>
</li>
<li>
<p>ってこない=わけがない（接续不一样）　　ない　違い</p>
</li>
<li>
<p>からと言って、（ない）　只凭……为理由是不行的</p>
<figure data-type="image" tabindex="10"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220812110308280.png" alt="image-20220812110308280" loading="lazy"></figure>
</li>
<li>
<p>N＋っぽい　印象 そう見える　そう感じ</p>
<p>V＋っぽい　よくする　すぐにする 经常 动不动 あきる　おこる</p>
</li>
</ol>
<pre><code class="language-mermaid">   graph LR;
       V-ます--&gt;気味;
       N--&gt;気味;
</code></pre>
<p>​    今の状態は少し～の感じがする</p>
<ol start="53">
<li>
<p>ことといったら</p>
<figure data-type="image" tabindex="11"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220813104455987.png" alt="image-20220813104455987" loading="lazy"></figure>
</li>
<li>
<p>くせに　のに</p>
</li>
<li>
<p>N＋のこただから</p>
</li>
<li>
<p><strong>なんか</strong>　いない＝ていない　強調　可能性を使うこともおおい</p>
<p>いない　いられない　違い</p>
<figure data-type="image" tabindex="12"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220813164458981.png" alt="image-20220813164458981" loading="lazy"></figure>
</li>
<li>
<p>さえ 强调（极端例子）</p>
<pre><code class="language-mermaid">graph LR
A[N+助詞]--&gt;B[さえ]
C[Vーて]--&gt;B
</code></pre>
<p>助词を、は、が省略</p>
</li>
<li>
<p>っぱなし　V<s>ます</s>＋っぱなし　たまま的负面版</p>
<figure data-type="image" tabindex="13"><img src="https://markdownpic-1305646899.cos.ap-beijing.myqcloud.com/image-20220813174025028.png" alt="image-20220813174025028" loading="lazy"></figure>
<p><a href="https://nihongonosensei.net/?p=8869">Ｎ１文法～っぱなし</a> <a href="https://www.edewakaru.com/archives/7710851.html">〜っぱなし｜日本語能力試験　JLPT　N２</a> <a href="https://www.sigure.tw/learn-japanese/grammar/n3/44.php">N3文法44「っぱなし」放置不管</a></p>
</li>
<li>
<p>だらけ/まみれ/ずくめ</p>
</li>
<li>
<p>たりして</p>
<p>①　普段と違う相手の様子を柔らかく言う</p>
<p>②　指示を柔らかく伝える</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux备忘]]></title>
        <id>https://yuchuanghui.github.io/post/linux-bei-wang/</id>
        <link href="https://yuchuanghui.github.io/post/linux-bei-wang/">
        </link>
        <updated>2021-08-26T14:14:43.000Z</updated>
        <content type="html"><![CDATA[<p>Linux备忘</p>
<h2 id="防火墙操作">防火墙操作</h2>
<ol>
<li>
<p>开启端口</p>
<pre><code class="language-bash">firewall-cmd --zone=public --addport=80/tcp --permanent
</code></pre>
</li>
<li>
<p>重载端口</p>
<pre><code class="language-bash">firewall-cmd --reload
</code></pre>
</li>
<li>
<p>查看所有端口</p>
<pre><code class="language-bash">firewall-cmd --zone=public --list-ports
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[shadowsocks一键搭建]]></title>
        <id>https://yuchuanghui.github.io/post/shadowsocks一键搭建/</id>
        <link href="https://yuchuanghui.github.io/post/shadowsocks一键搭建/">
        </link>
        <updated>2021-07-23T04:38:22.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="centos下一键安装shadowsocks服务">Centos下一键安装shadowsocks服务</h1>
<blockquote>
<p>参考：<a href="https://flyzyblog.net/install-ss-ssr-bbr-in-one-command/">一键脚本搭建SS/搭建SSR服务并开启BBR加速</a></p>
</blockquote>
 <!-- more -->
<ol>
<li>安装git服务</li>
</ol>
<pre><code class="language-bash">yum -y install git
</code></pre>
<ol start="2">
<li>获取一键安装脚本</li>
</ol>
<pre><code class="language-bash">git clone -b master https://github.com/flyzy2005/ss-fly
</code></pre>
<ol start="3">
<li>运行代码</li>
</ol>
<pre><code class="language-bash">ss-fly/ss-fly.sh -i psw 1024
</code></pre>
<ol start="4">
<li>相关操作</li>
</ol>
<pre><code class="language-bash">修改配置文件：vim /etc/shadowsocks.json
停止ss服务：ssserver -c /etc/shadowsocks.json -d stop
启动ss服务：ssserver -c /etc/shadowsocks.json -d start
重启ss服务：ssserver -c /etc/shadowsocks.json -d restart
</code></pre>
<ol start="5">
<li>卸载</li>
</ol>
<pre><code class="language-bash">ss-fly/ss-fly.sh -uninstall
</code></pre>
<ol start="6">
<li>开启bbr</li>
</ol>
<pre><code class="language-bash">ss-fly/ss-fly.sh -bbr
sysctl net.ipv4.tcp_available_congestion_control # bbr开启检测
</code></pre>
<p># TODO: SSR搭建<br>
# TODO: 具体代码的分析</p>
<p>执行脚本的源码：</p>
<pre><code class="language-sh">#! /bin/bash
# Copyright (c) 2018 flyzy小站

red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
plain='\033[0m'

os='ossystem'
password='flyzy2005.com'
port='1024'
libsodium_file=&quot;libsodium-1.0.16&quot;
libsodium_url=&quot;https://github.com/jedisct1/libsodium/releases/download/1.0.16/libsodium-1.0.16.tar.gz&quot;

fly_dir=&quot;$( cd &quot;$( dirname &quot;${BASH_SOURCE[0]}&quot; )&quot; &amp;&amp; pwd )&quot;

kernel_ubuntu_url=&quot;http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.10.2/linux-image-4.10.2-041002-generic_4.10.2-041002.201703120131_amd64.deb&quot;
kernel_ubuntu_file=&quot;linux-image-4.10.2-041002-generic_4.10.2-041002.201703120131_amd64.deb&quot;

usage () {
        cat $fly_dir/sshelp
}

DIR=`pwd`

wrong_para_prompt() {
    echo -e &quot;[${red}错误${plain}] 参数输入错误!$1&quot;
}

install_ss() {
        if [[ &quot;$#&quot; -lt 1 ]]
        then
          wrong_para_prompt &quot;请输入至少一个参数作为密码&quot;
          return 1
        fi
        password=$1
        if [[ &quot;$#&quot; -ge 2 ]]
        then
          port=$2
        fi
        if [[ $port -le 0 || $port -gt 65535 ]]
        then
          wrong_para_prompt &quot;端口号输入格式错误，请输入1到65535&quot;
          exit 1
        fi
        check_os
        check_dependency
        download_files
        ps -ef | grep -v grep | grep -i &quot;ssserver&quot; &gt; /dev/null 2&gt;&amp;1
        if [ $? -eq 0 ]; then
                ssserver -c /etc/shadowsocks.json -d stop
        fi
        generate_config $password $port
        if [ ${os} == 'centos' ]
        then
                firewall_set
        fi
        install
        cleanup
}

uninstall_ss() {
        read -p &quot;确定要卸载ss吗？(y/n) :&quot; option
        [ -z ${option} ] &amp;&amp; option=&quot;n&quot;
        if [ &quot;${option}&quot; == &quot;y&quot; ] || [ &quot;${option}&quot; == &quot;Y&quot; ]
        then
                ps -ef | grep -v grep | grep -i &quot;ssserver&quot; &gt; /dev/null 2&gt;&amp;1
                if [ $? -eq 0 ]; then
                        ssserver -c /etc/shadowsocks.json -d stop
                fi
                case $os in
                        'ubuntu'|'debian')
                                update-rc.d -f ss-fly remove
                                ;;
                        'centos')
                                chkconfig --del ss-fly
                                ;;
                esac
                rm -f /etc/shadowsocks.json
                rm -f /var/run/shadowsocks.pid
                rm -f /var/log/shadowsocks.log
                if [ -f /usr/local/shadowsocks_install.log ]; then
                        cat /usr/local/shadowsocks_install.log | xargs rm -rf
                fi
                echo &quot;ss卸载成功！&quot;
        else
                echo
                echo &quot;卸载取消&quot;
        fi
}

install_bbr() {
	[[ -d &quot;/proc/vz&quot; ]] &amp;&amp; echo -e &quot;[${red}错误${plain}] 你的系统是OpenVZ架构的，不支持开启BBR。&quot; &amp;&amp; exit 1
	check_os
	check_bbr_status
	if [ $? -eq 0 ]
	then
		echo -e &quot;[${green}提示${plain}] TCP BBR加速已经开启成功。&quot;
		exit 0
	fi
	check_kernel_version
	if [ $? -eq 0 ]
	then
		echo -e &quot;[${green}提示${plain}] 你的系统版本高于4.9，直接开启BBR加速。&quot;
		sysctl_config
		echo -e &quot;[${green}提示${plain}] TCP BBR加速开启成功&quot;
		exit 0
	fi
	    
	if [[ x&quot;${os}&quot; == x&quot;centos&quot; ]]; then
        	install_elrepo
        	yum --enablerepo=elrepo-kernel -y install kernel-ml kernel-ml-devel
        	if [ $? -ne 0 ]; then
            		echo -e &quot;[${red}错误${plain}] 安装内核失败，请自行检查。&quot;
            		exit 1
        	fi
    	elif [[ x&quot;${os}&quot; == x&quot;debian&quot; || x&quot;${os}&quot; == x&quot;ubuntu&quot; ]]; then
        	[[ ! -e &quot;/usr/bin/wget&quot; ]] &amp;&amp; apt-get -y update &amp;&amp; apt-get -y install wget
        	#get_latest_version
        	#[ $? -ne 0 ] &amp;&amp; echo -e &quot;[${red}错误${plain}] 获取最新内核版本失败，请检查网络&quot; &amp;&amp; exit 1
       		 #wget -c -t3 -T60 -O ${deb_kernel_name} ${deb_kernel_url}
        	#if [ $? -ne 0 ]; then
            	#	echo -e &quot;[${red}错误${plain}] 下载${deb_kernel_name}失败，请自行检查。&quot;
            	#	exit 1
       		#fi
        	#dpkg -i ${deb_kernel_name}
        	#rm -fv ${deb_kernel_name}
		wget ${kernel_ubuntu_url}
		if [ $? -ne 0 ]
		then
			echo -e &quot;[${red}错误${plain}] 下载内核失败，请自行检查。&quot;
			exit 1
		fi
		dpkg -i ${kernel_ubuntu_file}
    	else
       	 	echo -e &quot;[${red}错误${plain}] 脚本不支持该操作系统，请修改系统为CentOS/Debian/Ubuntu。&quot;
        	exit 1
    	fi

    	install_config
    	sysctl_config
    	reboot_os
}

install_ssr() {
        check_os
        case $os in
                'ubuntu'|'debian')
		     apt-get -y update
                     apt-get -y install wget
                     ;;
                'centos')
                     yum install -y wget
                     ;;
        esac
	wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh
	chmod +x shadowsocksR.sh
	./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log
}

check_os_() {
        source /etc/os-release
	local os_tmp=$(echo $ID | tr [A-Z] [a-z])
        case $os_tmp in
                ubuntu|debian)
                os='ubuntu'
                ;;
                centos)
                os='centos'
                ;;
                *)
                echo -e &quot;[${red}错误${plain}] 本脚本暂时只支持Centos/Ubuntu/Debian系统，如需用本脚本，请先修改你的系统类型&quot;
                exit 1
                ;;
        esac
}

check_os() {
    if [[ -f /etc/redhat-release ]]; then
        os=&quot;centos&quot;
    elif cat /etc/issue | grep -Eqi &quot;debian&quot;; then
        os=&quot;debian&quot;
    elif cat /etc/issue | grep -Eqi &quot;ubuntu&quot;; then
        os=&quot;ubuntu&quot;
    elif cat /etc/issue | grep -Eqi &quot;centos|red hat|redhat&quot;; then
        os=&quot;centos&quot;
    elif cat /proc/version | grep -Eqi &quot;debian&quot;; then
        os=&quot;debian&quot;
    elif cat /proc/version | grep -Eqi &quot;ubuntu&quot;; then
        os=&quot;ubuntu&quot;
    elif cat /proc/version | grep -Eqi &quot;centos|red hat|redhat&quot;; then
        os=&quot;centos&quot;
    fi
}

check_bbr_status() {
    local param=$(sysctl net.ipv4.tcp_available_congestion_control | awk '{print $3}')
    if [[ x&quot;${param}&quot; == x&quot;bbr&quot; ]]; then
        return 0
    else
        return 1
    fi
}

version_ge(){
    test &quot;$(echo &quot;$@&quot; | tr &quot; &quot; &quot;\n&quot; | sort -rV | head -n 1)&quot; == &quot;$1&quot;
}

check_kernel_version() {
    local kernel_version=$(uname -r | cut -d- -f1)
    if version_ge ${kernel_version} 4.9; then
        return 0
    else
        return 1
    fi
}

sysctl_config() {
    sed -i '/net.core.default_qdisc/d' /etc/sysctl.conf
    sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
    echo &quot;net.core.default_qdisc = fq&quot; &gt;&gt; /etc/sysctl.conf
    echo &quot;net.ipv4.tcp_congestion_control = bbr&quot; &gt;&gt; /etc/sysctl.conf
    sysctl -p &gt;/dev/null 2&gt;&amp;1
}

install_elrepo() {
    if centosversion 5; then
        echo -e &quot;[${red}错误${plain}] 脚本不支持CentOS 5。&quot;
        exit 1
    fi

    rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org

    if centosversion 6; then
        rpm -Uvh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm
    elif centosversion 7; then
        rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
    fi

    if [ ! -f /etc/yum.repos.d/elrepo.repo ]; then
        echo -e &quot;[${red}错误${plain}] 安装elrepo失败，请自行检查。&quot;
        exit 1
    fi
}

get_latest_version() {

    latest_version=$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/ | awk -F'\&quot;v' '/v[4-9]./{print $2}' | cut -d/ -f1 | grep -v -  | sort -V | tail -1)

    [ -z ${latest_version} ] &amp;&amp; return 1

    if [[ `getconf WORD_BIT` == &quot;32&quot; &amp;&amp; `getconf LONG_BIT` == &quot;64&quot; ]]; then
        deb_name=$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${latest_version}/ | grep &quot;linux-image&quot; | grep &quot;generic&quot; | awk -F'\&quot;&gt;' '/amd64.deb/{print $2}' | cut -d'&lt;' -f1 | head -1)
        deb_kernel_url=&quot;http://kernel.ubuntu.com/~kernel-ppa/mainline/v${latest_version}/${deb_name}&quot;
        deb_kernel_name=&quot;linux-image-${latest_version}-amd64.deb&quot;
    else
        deb_name=$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${latest_version}/ | grep &quot;linux-image&quot; | grep &quot;generic&quot; | awk -F'\&quot;&gt;' '/i386.deb/{print $2}' | cut -d'&lt;' -f1 | head -1)
        deb_kernel_url=&quot;http://kernel.ubuntu.com/~kernel-ppa/mainline/v${latest_version}/${deb_name}&quot;
        deb_kernel_name=&quot;linux-image-${latest_version}-i386.deb&quot;
    fi

    [ ! -z ${deb_name} ] &amp;&amp; return 0 || return 1
}

get_opsy() {
    [ -f /etc/redhat-release ] &amp;&amp; awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release &amp;&amp; return
    [ -f /etc/os-release ] &amp;&amp; awk -F'[= &quot;]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release &amp;&amp; return
    [ -f /etc/lsb-release ] &amp;&amp; awk -F'[=&quot;]+' '/DESCRIPTION/{print $2}' /etc/lsb-release &amp;&amp; return
}

opsy=$( get_opsy )
arch=$( uname -m )
lbit=$( getconf LONG_BIT )
kern=$( uname -r )

check_dependency() {
        case $os in
                'ubuntu'|'debian')
                apt-get -y update
                apt-get -y install python python-dev python-setuptools openssl libssl-dev curl wget unzip gcc automake autoconf make libtool
                ;;
                'centos')
                yum install -y python python-devel python-setuptools openssl openssl-devel curl wget unzip gcc automake autoconf make libtool
        esac
}

install_config() {
    if [[ x&quot;${os}&quot; == x&quot;centos&quot; ]]; then
        if centosversion 6; then
            if [ ! -f &quot;/boot/grub/grub.conf&quot; ]; then
                echo -e &quot;[${red}错误${plain}] 没有找到/boot/grub/grub.conf文件。&quot;
                exit 1
            fi
            sed -i 's/^default=.*/default=0/g' /boot/grub/grub.conf
        elif centosversion 7; then
            if [ ! -f &quot;/boot/grub2/grub.cfg&quot; ]; then
                echo -e &quot;[${red}错误${plain}] 没有找到/boot/grub2/grub.cfg文件。&quot;
                exit 1
            fi
            grub2-set-default 0
        fi
    elif [[ x&quot;${os}&quot; == x&quot;debian&quot; || x&quot;${os}&quot; == x&quot;ubuntu&quot; ]]; then
        /usr/sbin/update-grub
    fi
}

reboot_os() {
    echo
    echo -e &quot;[${green}提示${plain}] 系统需要重启BBR才能生效。&quot;
    read -p &quot;是否立马重启 [y/n]&quot; is_reboot
    if [[ ${is_reboot} == &quot;y&quot; || ${is_reboot} == &quot;Y&quot; ]]; then
        reboot
    else
        echo -e &quot;[${green}提示${plain}] 取消重启。其自行执行reboot命令。&quot;
        exit 0
    fi
}

download_files() {
        if ! wget --no-check-certificate -O ${libsodium_file}.tar.gz ${libsodium_url}
        then
                echo -e &quot;[${red}错误${plain}] 下载${libsodium_file}.tar.gz失败!&quot;
                exit 1
        fi
        if ! wget --no-check-certificate -O shadowsocks-master.zip https://github.com/shadowsocks/shadowsocks/archive/master.zip
        then
                echo -e &quot;[${red}错误${plain}] shadowsocks安装包文件下载失败！&quot;
                exit 1
        fi
}

generate_config() {
    cat &gt; /etc/shadowsocks.json&lt;&lt;-EOF
{
    &quot;server&quot;:&quot;0.0.0.0&quot;,
    &quot;server_port&quot;:$2,
    &quot;local_address&quot;:&quot;127.0.0.1&quot;,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;$1&quot;,
    &quot;timeout&quot;:300,
    &quot;method&quot;:&quot;aes-256-cfb&quot;,
    &quot;fast_open&quot;:false
}
EOF
}

firewall_set(){
    echo -e &quot;[${green}信息${plain}] 正在设置防火墙...&quot;
    if centosversion 6; then
        /etc/init.d/iptables status &gt; /dev/null 2&gt;&amp;1
        if [ $? -eq 0 ]; then
            iptables -L -n | grep -i ${port} &gt; /dev/null 2&gt;&amp;1
            if [ $? -ne 0 ]; then
                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT
                iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT
                /etc/init.d/iptables save
                /etc/init.d/iptables restart
            else
                echo -e &quot;[${green}信息${plain}] port ${port}已经开放。&quot;
            fi
        else
            echo -e &quot;[${yellow}警告${plain}] 防火墙（iptables）好像已经停止或没有安装，如有需要请手动关闭防火墙。&quot;
        fi
    elif centosversion 7; then
        systemctl status firewalld &gt; /dev/null 2&gt;&amp;1
        if [ $? -eq 0 ]; then
            firewall-cmd --permanent --zone=public --add-port=${port}/tcp
            firewall-cmd --permanent --zone=public --add-port=${port}/udp
            firewall-cmd --reload
        else
            echo -e &quot;[${yellow}警告${plain}] 防火墙（iptables）好像已经停止或没有安装，如有需要请手动关闭防火墙。&quot;
        fi
    fi
    echo -e &quot;[${green}信息${plain}] 防火墙设置成功。&quot;
}

centosversion(){
    if [ ${os} == 'centos' ]
    then
        local code=$1
        local version=&quot;$(getversion)&quot;
        local main_ver=${version%%.*}
        if [ &quot;$main_ver&quot; == &quot;$code&quot; ]; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

getversion(){
    if [[ -s /etc/redhat-release ]]; then
        grep -oE  &quot;[0-9.]+&quot; /etc/redhat-release
    else
        grep -oE  &quot;[0-9.]+&quot; /etc/issue
    fi
}

install() {
        if [ ! -f /usr/lib/libsodium.a ]
        then 
                cd ${DIR}
                tar zxf ${libsodium_file}.tar.gz
                cd ${libsodium_file}
                ./configure --prefix=/usr &amp;&amp; make &amp;&amp; make install
                if [ $? -ne 0 ] 
                then 
                        echo -e &quot;[${red}错误${plain}] libsodium安装失败!&quot;
                        cleanup
                exit 1  
                fi
        fi      
        ldconfig
        
        cd ${DIR}
        unzip -q shadowsocks-master.zip
        if [ $? -ne 0 ]
        then 
                echo -e &quot;[${red}错误${plain}] 解压缩失败，请检查unzip命令&quot;
                cleanup
                exit 1
        fi      
        cd ${DIR}/shadowsocks-master
        python setup.py install --record /usr/local/shadowsocks_install.log
        if [ -f /usr/bin/ssserver ] || [ -f /usr/local/bin/ssserver ]
        then 
                cp $fly_dir/ss-fly /etc/init.d/
                chmod +x /etc/init.d/ss-fly
                case $os in
                        'ubuntu'|'debian')
                                update-rc.d ss-fly defaults
                                ;;
                        'centos')
                                chkconfig --add ss-fly
                                chkconfig ss-fly on
                                ;;
                esac            
                ssserver -c /etc/shadowsocks.json -d start
        else    
                echo -e &quot;[${red}错误${plain}] ss服务器安装失败，请联系flyzy小站（https://www.flyzy2005.com）&quot;
                cleanup
                exit 1
        fi      
        echo -e &quot;[${green}成功${plain}] 安装成功尽情冲浪！&quot;
        echo -e &quot;你的服务器地址（IP）：\033[41;37m $(get_ip) \033[0m&quot;
        echo -e &quot;你的密码            ：\033[41;37m ${password} \033[0m&quot;
        echo -e &quot;你的端口            ：\033[41;37m ${port} \033[0m&quot;
        echo -e &quot;你的加密方式        ：\033[41;37m aes-256-cfb \033[0m&quot;
        echo -e &quot;欢迎访问flyzy小站   ：\033[41;37m https://www.flyzy2005.com \033[0m&quot;
        get_ss_link
}

cleanup() {
        cd ${DIR}
        rm -rf shadowsocks-master.zip shadowsocks-master ${libsodium_file}.tar.gz ${libsodium_file}
}

get_ip(){
    local IP=$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v &quot;^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\.&quot; | head -n 1 )
    [ -z ${IP} ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )
    [ -z ${IP} ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )
    [ ! -z ${IP} ] &amp;&amp; echo ${IP} || echo
}

get_ss_link(){
    if [ ! -f &quot;/etc/shadowsocks.json&quot; ]; then
        echo 'shdowsocks配置文件不存在，请检查（/etc/shadowsocks.json）'
        exit 1
    fi
    local tmp=$(echo -n &quot;`get_config_value method`:`get_config_value password`@`get_ip`:`get_config_value server_port`&quot; | base64 -w0)
    echo -e &quot;你的ss链接：\033[41;37m ss://${tmp} \033[0m&quot;
}

get_config_value(){
    cat /etc/shadowsocks.json | grep &quot;\&quot;$1\&quot;:&quot;|awk -F &quot;:&quot; '{print $2}'| sed 's/\&quot;//g;s/,//g;s/ //g'
}

if [ &quot;$#&quot; -eq 0 ]; then
	usage
	exit 0
fi

case $1 in
	-h|h|help )
		usage
		exit 0;
		;;
	-v|v|version )
		echo 'ss-fly Version 1.0, 2018-01-20, Copyright (c) 2018 flyzy2005'
		exit 0;
		;;
esac

if [ &quot;$EUID&quot; -ne 0 ]; then
	echo -e &quot;[${red}错误${plain}] 必需以root身份运行，请使用sudo命令&quot;
	exit 1;
fi

case $1 in
	-i|i|install )
        	install_ss $2 $3
		;;
        -bbr )
        	install_bbr
                ;;
        -ssr )
        	install_ssr
                ;;
	-uninstall )
		uninstall_ss
		;;
        -sslink )
                get_ss_link
                ;;
	* )
		usage
		;;
esac
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7上安装OpenVPN]]></title>
        <id>https://yuchuanghui.github.io/post/openvpn/</id>
        <link href="https://yuchuanghui.github.io/post/openvpn/">
        </link>
        <updated>2021-07-18T05:08:05.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="centos7上安装openvpn">Centos7上安装openvpn</h1>
<h2 id="本文参考">本文参考：</h2>
<ol>
<li><a href="http://steinslab.io/archives/436#">基于openvpn的校园网ipv6免流量方案 |ipv6|校园网|免流量</a><br>
这篇博文基于centos6，内容有些过时，直接按照他的方法现在已经不行了，但是可以用来参考ipv6的搭建</li>
<li><a href="https://www.twblogs.net/a/5d062dc1bd9eee1ede0385af">Centos7下搭建OpenVPN的过程记录</a><br>
这篇博文是主要参考</li>
<li><a href="https://4sysops.com/archives/openvpn-ipv6-minimal-configuration/">OpenVPN IPv6 and IPv4 configuration</a><br>
关于如何设置ipv6与服务器通信，实际上好像只需要修改proto udp6？</li>
<li><a href="http://islocal.cc/arlo/fd972502/">Centos7下OpenVpn服务器搭建</a><br>
南山居，基本类似</li>
<li><a href="https://www.twblogs.net/a/5d062dc1bd9eee1ede0385af">Cenos7 下搭建 OpenVPN 过程记录</a><br>
简体版</li>
<li><a href="https://blog.apnic.net/2017/06/09/using-openvpn-ipv6/">Using OpenVPN with IPv6</a><br>
完全不同的方法，仅供日后参考</li>
<li><a href="https://gitee.com/shijianfengxi/vpn/#https://gitee.com/yinjiangbi/vpn/raw/master/vpn.sh%3Evpn.sh;bash">免流一键脚本VPN搭建</a><br>
一键脚本，没有试过。实际上github上应该有很多一键脚本来着，但是感觉一旦不能成功还是很伤。如果一键失败，还是尝试手动搭一搭吧。</li>
</ol>
<!-- more -->
<h2 id="流程">流程</h2>
<figure data-type="image" tabindex="1"><img src="/images/openvpn_liuchengtu.png" alt="d" loading="lazy"></figure>
<h2 id="服务端">服务端</h2>
<ul>
<li>系统： centos7</li>
<li>OpenVPN： 2.4.7</li>
<li>easy-rsa：3.0.3</li>
</ul>
<h3 id="安装openvpn-easy-rsa-iptables-services">安装openvpn、 easy-rsa、iptables-services</h3>
<pre><code class="language-bash">yum -y install epel-release
yum -y install openvpn easy-rsa iptables-services
</code></pre>
<h3 id="使用easy-rsa生成需要的证书和相关文件">使用easy-rsa生成需要的证书和相关文件</h3>
<ol>
<li>
<p>将easy-rsa脚本复制到/etc/openvpn/，后面的所有操作都基于这个文件夹</p>
<pre><code class="language-bash">cp -r /usr/share/easy-rsa/ /etc/openvpn/
</code></pre>
</li>
<li>
<p>现在在openvpn文件夹下面有easy-rsa文件夹，进入该文件夹能看到不同的版本，选择最新版本。例如3.0.3，进入。然后编辑其中的vars文件。这一步是为了方便后续生成证书步骤，避免了重复输入信息。变量值填自己想填的即可，无特殊要求。</p>
<pre><code class="language-bash">cd etc/openvpn/easy-rsa/&lt;easy-rsa 版本号&gt;/ 
nano vars # 编辑文件
#以下为文件内容
export KEY_COUNTRY=&quot;***&quot;
export KEY_PROVINCE=&quot;***&quot;
export KEY_CITY=&quot;***&quot;
export KEY_ORG=&quot;***&quot;
export KEY_EMAIL=&quot;***&quot;
#文件编辑结束，退出，nano的操作自行百度即可
source ./vars #使变量生效
</code></pre>
</li>
<li>
<p>生成CA根证书，以下操作未说明均在easy-rsa文件夹下进行</p>
<pre><code class="language-bash">./easyrsa init-pki # 初始化
./easyrsa build-ca name # name自己选取，得到CA.crt
</code></pre>
</li>
<li>
<p>生成OpenVPN服务器证书和密码</p>
<pre><code class="language-bash">./easyrsa build-server-full server name # name就是你服务器证书的名字,得到name.crt、name.key
</code></pre>
</li>
<li>
<p>生成Diffile-Hellman算法所需要的密钥文件</p>
<pre><code class="language-bash">./easyrsa gen-dh # 得到dh.pem文件
</code></pre>
</li>
<li>
<p>生成tls-auth key，防止DoS和TLS攻击，可选</p>
<pre><code class="language-bash">openvpn --genkey --secret ta.key
</code></pre>
</li>
<li>
<p>为了方便，把上述文件整理到certs文件夹中</p>
<pre><code class="language-bash">mkdir /etc/openvpn/server/certs &amp;&amp; cd /etc/openvpn/server/certs/
cp /etc/openvpn/easy-rsa/3.03/pki/dh.pem ./     # SSL 協商時 Diffie-Hellman 算法需要的 key
cp /etc/openvpn/easy-rsa/3.03/pki/ca.crt ./        # CA 根證書
cp /etc/openvpn/easy-rsa/3.03/pki/issued/name.crt ./    # open VPN 服務器證書，注意此处name为前面自己选择的名字，下同
cp /etc/openvpn/easy-rsa/3.03/pki/private/name.key ./   # open VPN 服務器證書 key
cp /etc/openvpn/easy-rsa/3.03/ta.key ./   # tls-auth key
</code></pre>
</li>
<li>
<p>创建OpenVPN日志目录</p>
<pre><code class="language-bash">mkdir -p /var/log/openvpn/
chown openvpn:openvpn /var/log/openvpn
</code></pre>
</li>
</ol>
<p>至此，所有证书密钥相关文件创建完毕，接下来只需要将配置文件写好就可以了</p>
<h3 id="配置openvpn">配置OpenVPN</h3>
<p>模板文件位于/usr/share/doc/openvpn-&lt;open VPN版本号&gt;/sample/sample-config-files中，后缀为.conf，不过参考这个教程的人应该都会选择直接用配置好的：</p>
<ol>
<li>
<p>新建配置</p>
<pre><code class="language-bash">cd /etc/openvpn/o
nano server.conf
</code></pre>
</li>
<li>
<p>填入以下内容</p>
<pre><code class="language-bash">port 1194   # 监听的端口号,可选
proto udp6   # 服务端用的协议，udp 能快点，所以我选择 udp，udp6代表ipv6通信
dev tun
ca /etc/openvpn/server/certs/ca.crt  #   CA 根证书路径
cert /etc/openvpn/server/certs/name.crt  # open VPN 服务器证书路径
key /etc/openvpn/server/certs/name.key  # open VPN 服务器密钥路径，This file should be kept secret
dh /etc/openvpn/server/certs/dh.pem  # Diffie-Hellman 算法密钥文件路径
tls-auth /etc/openvpn/server/certs/ta.key 0 #  tls-auth key，参数 0 可以省略，如果不省略，那么客户端
# 配置相应的参数该配成 1。如果省略，那么客户端不需要 tls-auth 配置
server 10.8.0.0 255.255.255.0   # 该网段爲 open VPN 虚拟网卡网段，不要和内网网段衝突即可。open VPN 默认爲 10.8.0.0/24
push &quot;dhcp-option DNS 8.8.8.8&quot;  # DNS 服务器配置，可以根据需要指定其他 ns
push &quot;dhcp-option DNS 8.8.4.4&quot;
push &quot;redirect-gateway def1&quot;   # 客户端所有流量都通过 open VPN 转发，类似于代理开全局
compress lzo
duplicate-cn   # 允许一个用户多个终端连接
keepalive 10 120
comp-lzo
persist-key
persist-tun
user openvpn  # open VPN 进程启动用户，openvpn 用户在安装完 openvpn 后就自动生成了
group openvpn
log /var/log/openvpn/server.log  # 指定 log 文件位置
log-append /var/log/openvpn/server.log
status /var/log/openvpn/status.log
verb 3
explicit-exit-notify 1
</code></pre>
</li>
</ol>
<h3 id="配置防火墙">配置防火墙</h3>
<p>这几步我也不懂，看着操作就行</p>
<ol>
<li>
<p>禁用firewalld，使用iptables防火墙管理软件</p>
<pre><code class="language-bash">systemctl stop firewalld
systemctl mask firewalld
</code></pre>
</li>
<li>
<p>禁用 SELinux</p>
<p>马上关闭：setenforce 0 | 马上生效<br>
永久关闭：sed -i ‘s/SELINUX=enforcing/SELINUX=disabled/g’ /etc/selinux/config | 需要重启服务器生效</p>
</li>
<li>
<p>启用iptables</p>
<pre><code class="language-bash">systemctl enable iptables
systemctl start iptables
iptables -F   # 清理所有防火墙规则
</code></pre>
</li>
<li>
<p>添加防火墙规则，将 openvpn 的网络流量转发到公网：snat 规则 <strong>(重要)</strong></p>
<pre><code class="language-bash">iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE
iptables-save &gt; /etc/sysconfig/iptables   # iptables 规则持久化保存
</code></pre>
</li>
<li>
<p>Linux 服务器启用地址转发</p>
<pre><code class="language-bash">echo net.ipv4.ip_forward = 1 &gt;&gt; /etc/sysctl.conf
sysctl -p # 这一步一定得执行，否则不会立即生效。
</code></pre>
</li>
</ol>
<h3 id="启动openvpn">启动OpenVPN</h3>
<pre><code class="language-bash">systemctl start openvpn@server  # 启动
systemctl enable openvpn@server  # 开机自启动
systemctl status openvpn@server  # 查看服务状态
</code></pre>
<p>现在服务端配置已经完成，接下来只需要创建用户，和客户端联系起来就可以使用了</p>
<h2 id="用户创建与客户端">用户创建与客户端</h2>
<p>首先保证客户端安装了最新的OpenVPN软件，或者其他可用软件。<br>
接下来在服务端创建一个 open VPN 用户：<br>
首先创建一个客户端配置模板文件 sample.ovpn，该文件在脚本中会用到，放到 /etc/openvpn/client/ 目录，内容如下：<br>
sample.ovpn:</p>
<pre><code class="language-bash">client
proto udp6
dev tun
remote [open VPN服务端公网 ip，根据实际情况填写] 1194
ca ca.crt
cert admin.crt
key admin.key
tls-auth ta.key 1
remote-cert-tls server
persist-tun
persist-key
comp-lzo
verb 3
mute-replay-warnings
</code></pre>
<p>其实创建用户的过程就是生成客户端 SSL 证书的过程，然后将其他相关的证书文件、key、.ovpn 文件（客户端配置文件）打包到一起供客户端使用。由于创建一个用户的过程比较繁琐，所以在此将整个过程写成了一个脚本 ovpn_user.sh，脚本内容比较简单，一看就懂：</p>
<pre><code class="language-sh"># ! /bin/bash

set -e

OVPN_USER_KEYS_DIR=/etc/openvpn/client/keys
EASY_RSA_VERSION=3
EASY_RSA_DIR=/etc/openvpn/easy-rsa/
PKI_DIR=$EASY_RSA_DIR/$EASY_RSA_VERSION/pki

for user in &quot;$@&quot;
do
  if [ -d &quot;$OVPN_USER_KEYS_DIR/$user&quot; ]; then
    rm -rf $OVPN_USER_KEYS_DIR/$user
    rm -rf  $PKI_DIR/reqs/$user.req
    sed -i '/'&quot;$user&quot;'/d' $PKI_DIR/index.txt
  fi
  cd $EASY_RSA_DIR/$EASY_RSA_VERSION
  # 生成客户端 ssl 证书文件
  ./easyrsa build-client-full $user nopass
  # 整理下生成的文件
  mkdir -p  $OVPN_USER_KEYS_DIR/$user
  cp $PKI_DIR/ca.crt $OVPN_USER_KEYS_DIR/$user/   # CA 根证书
  cp $PKI_DIR/issued/$user.crt $OVPN_USER_KEYS_DIR/$user/   # 客户端证书
  cp $PKI_DIR/private/$user.key $OVPN_USER_KEYS_DIR/$user/  # 客户端证书密钥
  cp /etc/openvpn/client/sample.ovpn $OVPN_USER_KEYS_DIR/$user/$user.ovpn # 客户端配置文件
  sed -i 's/admin/'&quot;$user&quot;'/g' $OVPN_USER_KEYS_DIR/$user/$user.ovpn
  cp /etc/openvpn/server/certs/ta.key $OVPN_USER_KEYS_DIR/$user/ta.key  # auth-tls 文件
  cd $OVPN_USER_KEYS_DIR
  zip -r $user.zip $user
done
exit 0
</code></pre>
<p>执行脚本：</p>
<pre><code class="language-bash">sh ovpn_user.sh &lt;username&gt;
</code></pre>
<p>服务器没有zip的话记得手动安装</p>
<p>运行成功会在 /etc/openvpn/client/keys 目录下生成以用户名命名的 zip 打包文件，将该压缩包下载到本地解压，然后将解压文件全部放到openvpn软件的config里面，文件结构如下：</p>
<pre><code class="language-bash">.
├── ca.crt
├── username.crt
├── username.key
├── username.ovpn
└── ta.key
</code></pre>
<h3 id="删除一个用户">删除一个用户</h3>
<p>OpenVPN 的客户端和服务端的认证主要通过 SSL 证书进行双向认证，所以只要吊销对应用户的 SSL 证书即可。</p>
<ol>
<li>
<p>编辑OpenVPN服务端配置server.conf，添加如下配置：</p>
<pre><code class="language-bash">crl-verify /etc/openvpn/easy-rsa/3/pki/crl.pem
</code></pre>
</li>
<li>
<p>吊销用户证书</p>
<pre><code class="language-bash">cd /etc/openvpn/easy-rsa/3.0.3/
./easyrsa revoke username #需要删除的用户名
./easyrsa gen-crl
</code></pre>
</li>
<li>
<p>重启OpenVPN服务端使其生效</p>
<pre><code class="language-bash">systemctl start openvpn@server
</code></pre>
</li>
</ol>
<p>对应脚本：<br>
del_ovpn_user.sh:</p>
<pre><code class="language-sh"># ! /bin/bash

set -e
OVPN_USER_KEYS_DIR=/etc/openvpn/client/keys
EASY_RSA_VERSION=3
EASY_RSA_DIR=/etc/openvpn/easy-rsa/
for user in &quot;$@&quot;
do
  cd $EASY_RSA_DIR/$EASY_RSA_VERSION
  echo -e 'yes\n' | ./easyrsa revoke $user
  ./easyrsa gen-crl
  # 吊销掉证书后清理客户端相关文件
  if [ -d &quot;$OVPN_USER_KEYS_DIR/$user&quot; ]; then
    rm -rf $OVPN_USER_KEYS_DIR/${user}*
  fi
  systemctl restart openvpn@server
done
exit 0
</code></pre>
<p>原文参考：</p>
<ul>
<li>
<p>关于 <a href="https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage">open VPN 客户端和服务端配置文件配置项说明</a>：很全面，可以随时查看不懂的配置项</p>
</li>
<li>
<p><a href="https://openvpn.net/">OpenVPN 官网</a></p>
</li>
<li>
<p><a href="https://www.fandenggui.com/post/centos7-install-openvpn.html">Centos7 安装 OpenVPN</a></p>
</li>
<li>
<p><a href="https://www.howtoing.com/how-to-install-openvpn-on-centos-7">Centos7 安装 OpenVPN</a></p>
</li>
<li>
<p><a href="https://www.xiaohui.com/dev/server/20070904-revoke-openvpn-client.htm">吊销客户端证书</a></p>
</li>
<li>
<p><a href="https://scott.stevensononthe.net/2015/02/how-to-addremove-additional-users-to-openvpn/">吊销客户端证书</a></p>
</li>
<li>
<p><a href="https://tunnelblick.net/cConnectedBut.html">open VPN 一些常见问题</a></p>
</li>
<li>
<p><a href="https://tunnelblick.net/ipinfo">本地公网 ip 查看</a></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[openssh]]></title>
        <id>https://yuchuanghui.github.io/post/openssh/</id>
        <link href="https://yuchuanghui.github.io/post/openssh/">
        </link>
        <updated>2021-06-28T08:58:34.000Z</updated>
        <summary type="html"><![CDATA[<p>主要是可以在终端就可以直接连接主机进行操作，同时还有一个比较好用的scp传递文件，今天发现在windows上也可以使用，在应用功能-&gt;可选功能中可以选择安装openssh-cilent和server，默认是安装好的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>主要是可以在终端就可以直接连接主机进行操作，同时还有一个比较好用的scp传递文件，今天发现在windows上也可以使用，在应用功能-&gt;可选功能中可以选择安装openssh-cilent和server，默认是安装好的。</p>
<!-- more -->
<h2 id="1-基本使用"><strong>1、基本使用</strong></h2>
<pre><code class="language-bash">ssh root@&lt;ip address&gt;
</code></pre>
<p>然后输入密码</p>
<h2 id="2-传输文件"><strong>2、传输文件</strong></h2>
<pre><code class="language-bash">scp &lt;file-path&gt; root@&lt;ip address&gt;:&lt;target path&gt;
</code></pre>
<h2 id="3-公钥登录"><strong>3、公钥登录</strong></h2>
<ol>
<li>在自己的电脑上生成公钥私钥</li>
</ol>
<pre><code class="language-bash">ssh-keygen -t rsa
</code></pre>
<ol start="2">
<li>进入到公钥文件的文件夹，将其复制到服务器中</li>
</ol>
<pre><code class="language-bash">cd &lt;path&gt;
scp id_rsa.pub root@&lt;ip&gt;:~/.ssh/authorized_keys
</code></pre>
<p>如果显示无路径就在服务器新建文件夹.ssh和文件authorized_keys</p>
<ol start="3">
<li>连接到服务器，修改配置</li>
</ol>
<ul>
<li>
<p>ssh_config</p>
<p>修改IdentityFile ~/.ssh/id_rsa(除去注释)</p>
</li>
<li>
<p>sshd_config</p>
<p>修改RSAAuthentication yes(没有该条就不管)</p>
<p>PubkeyAuthentication yes</p>
<p>AuthorizedKeysFile .ssh/authorized_keys（注意和上面路径一致，一般是一样的）</p>
</li>
</ul>
<ol start="4">
<li>配置完成，之后连接就不需要输入密码了</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Openssh使用小记]]></title>
        <id>https://yuchuanghui.github.io/post/openssh-shi-yong-xiao-ji/</id>
        <link href="https://yuchuanghui.github.io/post/openssh-shi-yong-xiao-ji/">
        </link>
        <updated>2021-06-27T07:45:52.000Z</updated>
        <content type="html"><![CDATA[<p>主要是可以在终端就可以直接连接主机进行操作，同时还有一个比较好用的scp传递文件，今天发现在windows上也可以使用，在应用功能-&gt;可选功能中可以选择安装openssh-cilent和server，默认是安装好的。</p>
<h2 id="1-基本使用">1、基本使用</h2>
<pre><code class="language-bash">ssh root@&lt;ip address&gt;
</code></pre>
<p>然后输入密码</p>
<h2 id="2-传输文件">2、传输文件</h2>
<pre><code class="language-bash">scp &lt;file-path&gt; root@&lt;ip address&gt;:&lt;target path&gt;
</code></pre>
<h2 id="3-公钥登录">3、公钥登录</h2>
<ol>
<li>在自己的电脑上生成公钥私钥</li>
</ol>
<pre><code class="language-bash">ssh-keygen -t rsa
</code></pre>
<ol start="2">
<li>进入到公钥文件的文件夹，将其复制到服务器中</li>
</ol>
<pre><code class="language-bash">cd &lt;path&gt;
scp id_rsa.pub root@&lt;ip&gt;:~/.ssh/authorized_keys
</code></pre>
<p>如果显示无路径就在服务器新建文件夹.ssh和文件authorized_keys<br>
3. 连接到服务器，修改配置</p>
<ul>
<li>ssh_config<br>
修改IdentityFile ~/.ssh/id_rsa(除去注释)</li>
<li>sshd_config<br>
修改RSAAuthentication yes(没有该条就不管)<br>
PubkeyAuthentication yes<br>
AuthorizedKeysFile .ssh/authorized_keys（注意和上面路径一致，一般是一样的）</li>
</ul>
<ol start="4">
<li>配置完成，之后连接就不需要输入密码了</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://yuchuanghui.github.io/post/about/</id>
        <link href="https://yuchuanghui.github.io/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<p>分享有趣有用的知识</p>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<p>三日坊主</p>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<p>骑车、组车、健身、轻小说、摸鱼（不是</p>
<h2 id="联系我呀">📬 联系我呀</h2>
<p>有缘即可</p>
]]></content>
    </entry>
</feed>